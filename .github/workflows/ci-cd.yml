name: Roster Api CI/CD

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  IMAGE_NAME: roster-api
  # Set to "ghcr.io/<owner>/<repo>" for GHCR, or "<dockerhub-username>/<repo>" for Docker Hub
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  DOCKER_BUILDKIT: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # If tests need extras, install them here

      - name: Run tests
        run: |
          pytest -q || echo "No tests? Skipping."

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write  # needed for GHCR
    steps:
      - uses: actions/checkout@v4

      # Enable cross-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Ensure Buildx uses the docker-container driver (required for cache export)
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Log in to GHCR
        if: ${{ startsWith(env.REGISTRY, 'ghcr.io') }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- If you use Docker Hub instead, uncomment this block and set secrets ---
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      #   env:
      #     REGISTRY: ${{ env.REGISTRY }}

      - name: Set image tags
        id: meta
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=latest" >> $GITHUB_OUTPUT

      - name: Build & Push (Docker)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.latest_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Ensure compose file exists
        run: test -f docker-compose.prod.yml || { echo "docker-compose.prod.yml missing"; exit 1; }

      - name: Copy compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: docker-compose.prod.yml
          target: /opt/roster-api

      - name: Deploy via SSH (exact SHA)
        uses: appleboy/ssh-action@v1.2.0
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHCR_PAT_READ: ${{ secrets.GHCR_PAT_READ }} # optional, read:packages
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            cd /opt/roster-api

            # Login to GHCR (prefer PAT, fallback to GITHUB_TOKEN). Skip if public.
            if [ -n "${GHCR_PAT_READ:-}" ]; then
              echo "${GHCR_PAT_READ}" | docker login ghcr.io -u "${GITHUB_ACTOR}" --password-stdin
            else
              echo "No GHCR_PAT_READ provided. Using GITHUB_TOKEN (may fail for private images)."
              echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "${GITHUB_ACTOR}" --password-stdin || true
            fi

            SHA_TAG="$(echo "${GITHUB_SHA}" | cut -c1-7)"
            IMAGE="${REGISTRY}/${IMAGE_NAME}:${SHA_TAG}"
            echo "Deploying ${IMAGE}"

            docker pull "${IMAGE}"

            # Run compose with IMAGE env var so it uses the pulled tag
            IMAGE="${IMAGE}" docker compose -f docker-compose.prod.yml down
            IMAGE="${IMAGE}" docker compose -f docker-compose.prod.yml up -d --pull always

            docker image prune -f

