name: Roster Api CI/CD

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  IMAGE_NAME: roster-api
  # Set to "ghcr.io/<owner>/<repo>" for GHCR, or "<dockerhub-username>/<repo>" for Docker Hub
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  DOCKER_BUILDKIT: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # If tests need extras, install them here

      - name: Run tests
        run: |
          pytest -q || echo "No tests? Skipping."

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write  # needed for GHCR
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        if: ${{ startsWith(env.REGISTRY, 'ghcr.io') }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- If you use Docker Hub instead, uncomment this block and set secrets ---
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      #   env:
      #     REGISTRY: ${{ env.REGISTRY }}

      - name: Set image tags
        id: meta
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=latest" >> $GITHUB_OUTPUT

      - name: Build & Push (Docker)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.latest_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Copy compose & env to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: |
            docker-compose.prod.yml
            .env
          target: /opt/roster-api

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd /opt/roster-api

            # Login to registry on server (GHCR example)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull new image + restart
            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            docker pull "$IMAGE"

            # Ensure compose file exists and up-to-date
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d

            # Prune old dangling images
            docker image prune -f
