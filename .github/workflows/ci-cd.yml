name: Roster Api CI/CD

on:
  push:
    branches: ["master"]
  workflow_dispatch:

env:
  IMAGE_NAME: roster-api
  REGISTRY: ghcr.io/${{ toLower(github.repository_owner) }}
  DOCKER_BUILDKIT: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          # Use CPU Torch wheels (keeps CI light)
          pip install -r requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu

      - name: Run tests
        run: pytest -q || echo "No tests? Skipping."

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 45
    permissions:
      contents: read
      packages: write
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      sha_tag: ${{ steps.meta.outputs.sha_tag }}
    steps:
      - uses: actions/checkout@v4

      # QEMU needed to build arm64 on GitHub's x86 runners
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Log in to GHCR
        if: ${{ startsWith(env.REGISTRY, 'ghcr.io') }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tags
        id: meta
        run: |
          echo "sha_tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          echo "latest_tag=latest" >> "$GITHUB_OUTPUT"

      - name: Build & Push (ARM64)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/arm64
          build-args: |
            TORCH_INDEX_URL=https://download.pytorch.org/whl/cpu
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.latest_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Ensure compose file exists
        run: test -f docker-compose.prod.yml || { echo "docker-compose.prod.yml missing"; exit 1; }

      - name: Copy compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: docker-compose.prod.yml
          target: /opt/roster-api

      - name: Deploy via SSH (pull by digest)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail

            mkdir -p /opt/roster-api
            cd /opt/roster-api

            if docker compose version >/dev/null 2>&1; then
              COMPOSE="docker compose"
            else
              COMPOSE="docker-compose"
            fi

            docker logout ghcr.io || true

            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.digest }}"
            echo "Deploying $IMAGE"
            docker pull "$IMAGE"

            export IMAGE="$IMAGE"
            export API_KEY="${{ vars.API_KEY }}"
            export COMPOSE_FILE=docker-compose.prod.yml

            $COMPOSE down || true
            $COMPOSE up -d --pull always --remove-orphans
            $COMPOSE ps

            for i in {1..12}; do
              if curl -fsS http://127.0.0.1:8000/api/health/check; then
                echo "Health OK"; break
              fi
              echo "Waiting for healthâ€¦ ($i/12)"; sleep 5
            done

            docker image prune -f
